---
-  hosts: localhost
   gather_facts: no
   module_defaults:
      group/aws:
         region: "us-east-2"
   tasks:
      - name: Create VPC
        ec2_vpc_net:
          name: m5-image-gallery-vpc
          cidr_block: 10.10.0.0/16 #test
          tags:
             Module: 5
          state: present
        register: vpc
      - name: debug
        debug: var=vpc
      - name: Create public subnet
        ec2_vpc_subnet:
         vpc_id: "{{ vpc.vpc.id }}" 
         tags:
            Name: Module5public
            Module: 5
         cidr: 10.10.1.0/24
         az: us-east-2a
         state: present
        register: public_subnet
      - name: Create second public subnet
        ec2_vpc_subnet:
         vpc_id: "{{ vpc.vpc.id }}" 
         tags:
            Name: Module5public2
            Module: 5
         cidr: 10.10.4.0/24
         state: present
         az: us-east-2b
        register: public_subnet2
      - name: Create private subnet
        ec2_vpc_subnet:
         vpc_id: "{{ vpc.vpc.id }}"
         tags:
            Name: Module5private
            Module: 5
         cidr: 10.10.2.0/24
         az: us-east-2a
         state: present
        register: private_subnet
      - name: Create private second subnet
        ec2_vpc_subnet:
         vpc_id: "{{ vpc.vpc.id }}"
         tags:
            Name: Module5private2
            Module: 5
         cidr: 10.10.3.0/24
         az: us-east-2b
         state: present
        register: private_subnet2
      - name: Create internet gateway
        ec2_vpc_igw:
         vpc_id: "{{ vpc.vpc.id }}"
         tags:
            Name: Module 5 gateway
            state: present
        register: igw
      - name: Create public route table
        ec2_vpc_route_table:
         vpc_id: "{{ vpc.vpc.id }}"
         tags:
            Name: m5-ig-public-rt
            Module: 5
         subnets:
            - "{{ public_subnet.subnet.id }}"
            - "{{ public_subnet2.subnet.id }}"
         routes:
            - dest: 0.0.0.0/0
              gateway_id: "{{ igw.gateway_id }}"
         state: present
      - name: Create new nat gateway and allocate new EIP if a nat gateway does not yet exist in the subnet.
        ec2_vpc_nat_gateway:
         state: present
         subnet_id: "{{ public_subnet.subnet.id }}"
         wait: yes
         if_exist_do_not_create: true
        register: nat
      - name: debug
        debug: var=nat
      - name: Create private route table
        ec2_vpc_route_table:
         vpc_id: "{{ vpc.vpc.id }}"
         tags:
            Name: m5-ig-private-rt
            Module: 5
         subnets:
            - "{{ private_subnet.subnet.id }}"
            - "{{ private_subnet2.subnet.id }}"
         routes:
            - dest: 0.0.0.0/0
              gateway_id: "{{ nat.nat_gateway_id }}"
         state: present
      - name: Create ig-development security group
        ec2_group:
         name: m5-ig-development
         description: Public Security Group
         vpc_id: "{{ vpc.vpc.id }}"
         rules:
            - proto: tcp
              from_port: 22
              to_port: 22
              cidr_ip: 0.0.0.0/0
            - proto: tcp
              from_port: 5000
              to_port: 5000
              cidr_ip: 98.179.235.113/32
            - proto: tcp
              from_port: 5000
              to_port: 5000
              cidr_ip: 24.196.25.139/32
            - proto: tcp
              from_port: 5000
              to_port: 5000
              cidr_ip: 24.239.105.213/32
         tags:
           Name: m5-ig-development
         state: present
        register: ig_development_sg
      - name: Create ig-postgres-tag security group
        ec2_group:
         name: m5-ig-postgres-tag
         description: Used to allow traffic to RDS
         vpc_id: "{{ vpc.vpc.id }}"
         rules:
            - proto: tcp
              ports:
                - 80
                - 443
                - 1024-65535
              group_name: m5-ig-postgres
              group_desc: Private RDS security group
         rules_egress:
            - proto: tcp
              ports:
                - 80
                - 5432
                - 443
                - 1024-65535
              group_name: m5-ig-postgres
         tags:
           Name: m5-ig-postgres-tag
         state: present
        register: ig_postgres_tag_sg
      - name: Create ig-postgres security group
        ec2_group:
         name: m5-ig-postgres
         description: Developer security group
         vpc_id: "{{ vpc.vpc.id }}"
         rules:
            - proto: tcp
              ports:
                - 80
                - 443
                - 5432
                - 1024-65535
              group_name: m5-ig-postgres-tag
         #rules_egress:
          #  - proto: tcp
           #   - 80
            #  - 5432
             # - 443
              #- 1024-65535
              #group_name: m5-ig-postgres
         tags:
          Name: m5-ig-postgres
         state: present
        register: ig_postgres_sg
      - name: Create asg-nginx-servers security group
        ec2_group:
         name: m5-asg-nginx-servers
         description: nginx ASG group
         vpc_id: "{{ vpc.vpc.id }}"
         rules:
            - proto: tcp
              ports:
                - 22
                - 443
                - 1024-65535
              cidr_ip: 0.0.0.0/0
            - proto: tcp
              ports:
                - 80
                - 5000
                - 5500
              cidr_ip:
                - 98.179.235.113/32
                - 24.196.25.139/32
                - 24.196.25.139/32
         tags:
           Name: m5-nginx-asg-sg
         state: present
        register: nginx_sg
      - name: "Create and associate network ACL with Private Subnets"
        ec2_vpc_nacl:
          vpc_id: "{{ vpc.vpc.id }}"
          name: m5-ig-private-acl
          subnets: ["{{ private_subnet.subnet.id }}", "{{ private_subnet2.subnet.id }}"]
          tags:
            Module: 5
            Description: M5 Private ACL
          ingress:
              # rule no, protocol, allow/deny, cidr, icmp_type, icmp_code,
              #                                             port from, port to
              - [100, 'tcp', 'allow', '10.10.1.0/24', null, null, 5432, 5432]
              - [110, 'tcp', 'allow', '10.10.2.0/24', null, null, 5432, 5432]
              - [120, 'tcp', 'allow', '10.10.3.0/24', null, null, 5432, 5432]
              - [130, 'tcp', 'allow', '10.10.4.0/24', null, null, 5432, 5432]
              - [200, 'tcp', 'allow', '10.10.1.0/24', null, null, 443, 443]
              - [210, 'tcp', 'allow', '10.10.2.0/24', null, null, 443, 443]
              - [220, 'tcp', 'allow', '10.10.3.0/24', null, null, 443, 443]
              - [230, 'tcp', 'allow', '10.10.4.0/24', null, null, 443, 443]
              - [300, 'tcp', 'allow', '10.10.1.0/24', null, null, 1024, 65535]
              - [310, 'tcp', 'allow', '10.10.2.0/24', null, null, 1024, 65535]
              - [320, 'tcp', 'allow', '10.10.3.0/24', null, null, 1024, 65535]
              - [330, 'tcp', 'allow', '10.10.4.0/24', null, null, 1024, 65535]
          egress:
              - [100, 'tcp', 'allow', '10.10.1.0/24', null, null, 443, 443]
              - [110, 'tcp', 'allow', '10.10.2.0/24', null, null, 443, 443]
              - [120, 'tcp', 'allow', '10.10.3.0/24', null, null, 443, 443]
              - [130, 'tcp', 'allow', '10.10.4.0/24', null, null, 443, 443]
              - [200, 'tcp', 'allow', '10.10.1.0/24', null, null, 1024, 65535]
              - [210, 'tcp', 'allow', '10.10.2.0/24', null, null, 1024, 65535]
              - [220, 'tcp', 'allow', '10.10.3.0/24', null, null, 1024, 65535]
              - [230, 'tcp', 'allow', '10.10.4.0/24', null, null, 1024, 65535]
          state: 'present'
        register: private_acl
      - name: "Create and associate network ACL with Public Subnets"
        ec2_vpc_nacl:
          vpc_id: "{{ vpc.vpc.id }}"
          name: m5-ig-public-acl
          subnets: ["{{ public_subnet.subnet.id }}", "{{ public_subnet2.subnet.id }}"]
          tags:
            Module: 5
            Description: M5 Public ACL
          ingress:
              # rule no, protocol, allow/deny, cidr, icmp_type, icmp_code,
              #                                             port from, port to
              - [100, 'tcp', 'allow', '0.0.0.0/0', null, null, 80, 80]
              - [110, 'tcp', 'allow', '0.0.0.0/0', null, null, 443, 443]
              - [200, 'tcp', 'allow', '0.0.0.0/0', null, null, 22, 22]
              - [300, 'tcp', 'allow', '98.179.235.113/32', null, null, 5000, 5000]
              - [310, 'tcp', 'allow', '24.196.25.139/32', null, null, 5000, 5000]
              - [320, 'tcp', 'allow', '24.239.105.213/32', null, null, 5000, 5000]
              - [330, 'tcp', 'allow', '98.179.235.113/32', null, null, 5555, 5555]
              - [400, 'tcp', 'allow', '0.0.0.0/0', null, null, 1024, 65535]
          egress:
              - [100, 'tcp', 'allow', '0.0.0.0/0', null, null, 80, 80]
              - [200, 'tcp', 'allow', '0.0.0.0/0', null, null, 443, 443]
              - [300, 'tcp', 'allow', '0.0.0.0/0', null, null, 5432, 5432]
              - [400, 'tcp', 'allow', '0.0.0.0/0', null, null, 1024, 65535]
          state: 'present'
        register: public_acl
...
